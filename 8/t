
typedef struct s_map
{
    char    freq;

    /* Number of antennas that
     * have `freq` frequency */
    int     ant_num;

    /* Coordinates of all antennas that have `freq` frequency */
    t_point ants[MAX_LINE_NUM * MAX_LINE_LEN]; /* Antennas */

}   t_map;

/* Returns the index of the frequency `freq` */
int     was_found(t_map *f, int *freq_cnt, char freq)
{
    for (int fi = 0; fi < *freq_cnt; fi++)
    {
        if (f[fi].freq == freq)
            return (fi);
    }
    return (-1); /* Frequency was not found */
}

/* Adds the new frequency `freq` that has coordinates `x` and `y`
 * in the map (dictionary) `f` */
void    add(t_map *f, int *freq_cnt, char freq, int x, int y)
{
    int find = was_found(f, freq_cnt, freq);

    /* An antenna with `freq` frequency was
     * already found, i.e. the key `freq` are
     * already present in the map `f` */
    if (find != -1)
    {
        f[find].ants[ f[find].ant_num ].X = x;
        f[find].ants[ f[find].ant_num ].Y = y;
        f[find].ant_num++;
    }
    else /* An antenna with `freq` was not found yet */
    {
        /* Let's add a new frequency in the map */
        f[*freq_cnt].freq = freq;
        f[*freq_cnt].ants[0].X = x;
        f[*freq_cnt].ants[0].Y = y;
        f[*freq_cnt].ant_num++;
        (*freq_cnt)++;
    }
}

    /* Counter of the unique
     * frequencies found */
    int     freq_cnt; 

    /* A dictionary that stores all unique
     * frequencies found */
    t_map   f[MAX_LINE_NUM * MAX_LINE_LEN];

    for(int i = 0; i < MAX_LINE_NUM * MAX_LINE_LEN; i++)
        f[i].ant_num = 0;
    
    freq_cnt = 0;
    /* Let's group all the antennas that exist
     * in the matrix by their frequencies
     * using a dictionary `f` */
    for (int yi = 0; yi < height; yi++)
    {
        for (int xi = 0; xi < width; xi++)
        {
            if (m[yi][xi] != '.')
            {
                add(f, &freq_cnt, m[yi][xi], xi, yi);
            }
        }
    }

    int     anum;
    /* Let's print the generated dictionary */
    for (int ki = 0; ki < freq_cnt; ki++)
    {
        printf("'%c' => { ", f[ki].freq);
        anum = f[ki].ant_num;
        for (int ai = 0; ai < anum; ai++)
        {
            if (ai < anum - 1)
                printf("(%d, %d), ", f[ki].ants[ai].X, f[ki].ants[ai].Y);
            else
                printf("(%d, %d) ", f[ki].ants[ai].X, f[ki].ants[ai].Y);
        }
        printf("};\n");
    }

